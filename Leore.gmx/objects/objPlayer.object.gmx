<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objLiving</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, objCamera);

cx = x;
cy = y;

zVel = 0;
zGrav = .15;
z = 0;

xVel = 0;
yVel = 0;
maxVel = 6;
xPrev = x;
yPrev = y;
spd = 1.5;
spdWater = 1;
spdRoll = 3;
accRoll = .1;
accWalk = .2;

inWater = false;
inHole = false;
isRolling = false;
inDeepWater = false;

fallTimeout = 0;
maxFallTimeout = 60;

state = IDLE;
fCur = 0;
frame = 0;
dir = DOWN;
angle = 270;
row = 0;

hp = 3;
staff = noone;
spell = 0;

hole = noone;

canDestroy = false;
dsCol = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(dsCol);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cx = (bbox_right + bbox_left) / 2;
cy = (bbox_bottom + bbox_top) / 2;

if (staff == noone &amp;&amp; global.hasStaff) {
    staff = instance_create(x, y + TILE, objStaff);
    staff.state = S_STAY;
}

// FLAGS
inWater = z == 0 &amp;&amp; tile_layer_find(LAYER_WATER, x, y);

inDeepWater = false;
if (inWater) {
    var wt = tile_layer_find(LAYER_WATER, x, y);
    if (getTileIndexForCoordinates(tile_get_left(wt), tile_get_top(wt)) 
        == T_DEEPWATER) {
        inDeepWater = true;
    }
}

if (state == FALL) {
    xVel = 0;
    yVel = 0;
    if (fallTimeout) {
        dir = DOWN;
        fallTimeout = max(fallTimeout - 1, 0);
    }
    else {
        x = xPrev;
        y = yPrev;
        state = IDLE;
    }
} else {
    inHole = false;
}

if (inDeepWater &amp;&amp; !global.canSwim &amp;&amp; state != DROWN) {
    state = DROWN;
    fCur = 0;
}

if (state == DROWN) {
    xVel *= .9;
    yVel *= .9;
}

// INPUT HANDLING

if (inDeepWater &amp;&amp; !global.canSwim) setControlsEnabled(false);
if (inHole) setControlsEnabled(false);

kUp = keyPressed("up");
kDown = keyPressed("down");
kLeft = keyPressed("left");
kRight = keyPressed("right");
kRoll = keyPressed("roll");
kStaff = keyPressed("staff");
kSpell = keyPressed("spell");

if (state == IDLE || state == WALK) {

    if (kLeft) dir = LEFT;
    if (kRight) dir = RIGHT;
    if (kUp) dir = UP;
    if (kDown) dir = DOWN;
    
    if (kLeft) {
        xVel = max(xVel - accWalk, -spd);
    }
    if (kRight) {
        xVel = min(xVel + accWalk, spd);
    }
    if (kUp) {
        yVel = max(yVel - accWalk, -spd);
    }
    if (kDown) {
        yVel = min(yVel + accWalk, spd);
    }
    
    if (!kLeft &amp;&amp; !kRight) xVel = 0;
    if (!kUp &amp;&amp; !kDown) yVel = 0;
        
    if (state == IDLE) {    
        if (kLeft || kRight || kUp || kDown) state = WALK;
    }
    if (state == WALK)
        if (!kLeft &amp;&amp; !kRight &amp;&amp; !kUp &amp;&amp; !kDown) state = IDLE;

    if (global.canRoll) {
        if (kRoll) state = ROLL;
    }
        
} 
if (state == ROLL) {
    
    if (kLeft) dir = LEFT;
    if (kRight) dir = RIGHT;
    if (kUp) dir = UP;
    if (kDown) dir = DOWN;

    if (kRoll) {
        if (kRight) { xVel += accRoll; }
        if (kLeft) { xVel -= accRoll; }
    }
    
    if (kRoll) {
        if (kDown) { yVel += accRoll; }
        if (kUp) { yVel -= accRoll; }
    }

    if (!kRoll &amp;&amp; xVel == 0 &amp;&amp; yVel == 0 &amp;&amp; z == 0) 
        state = IDLE;

    if ((!kLeft &amp;&amp; !kRight) || !kRoll) xVel = sign(xVel)*max(abs(xVel) - accRoll, 0);
    if ((!kUp &amp;&amp; !kDown) || !kRoll) yVel = sign(yVel)*max(abs(yVel) - accRoll, 0);
        
    xVel = sign(xVel) * min(abs(xVel), spdRoll);
    yVel = sign(yVel) * min(abs(yVel), spdRoll);
}

if (inWater) {
    xVel = sign(xVel) * min(abs(xVel), spdWater);
    yVel = sign(yVel) * min(abs(yVel), spdWater);
}

// DESTROYING OBJECTS

canDestroy = state == ROLL &amp;&amp; (max(abs(xVel), abs(yVel)) &gt; .5) &amp;&amp; z == 0;

ds_list_clear(dsCol);
instance_deactivate_object(objDestroyable);
instance_activate_region(x - 32, y - 32, 64, 64, true);
for(var i = 0; i &lt; instance_number(objDestroyable); i++) {

    var destroyable = instance_find(objDestroyable, i);
    
    if (place_meeting(x + xVel, y + yVel, destroyable)) {
        if (!ds_list_find_index(dsCol, destroyable)) {
            if (canDestroy) {
                destroyable.hp = max(destroyable.hp - 1, 0);
            }
            if (destroyable.hp &gt; 0) {
                ds_list_add(dsCol, destroyable);
            }
        }
    }
}
instance_activate_object(objDestroyable);

// HOLES

if (z == 0) {
    var minDist = 999;
    hole = noone;
    instance_deactivate_object(objHole);
    instance_activate_region(cx - 2*TILE, cy - 2*TILE, 4*TILE, 4*TILE, true);

    for (var i = 0; i &lt; instance_number(objHole); i++) {
        var h = instance_find(objHole, i);
        if (place_meeting(x, y + 3, h)) {
            var dist = point_distance(x, y, h.x + 8, h.y + 8);
            if (dist &lt; minDist) {
                minDist = dist;
                hole = h;
            }
        }
    }

    instance_activate_object(objHole);
    if (instance_exists(hole)) {
    
            var ang = point_direction(cx, cy, hole.x + 8, hole.y + 8);
            var hole_dist = point_distance(cx, cy, hole.x + 8, hole.y + 8);
    
            xVel += lengthdir_x(.3, ang);
            yVel += lengthdir_y(.3, ang);

        if (state != FALL) {

            if (collision_point(cx, cy, objHole, 0, 1)) {
                inHole = true;
                hole = noone;
                state = FALL;
                fallTimeout = maxFallTimeout;
            }
        }
    } else
    {
        if (!inWater) {
            xPrev = x;
            yPrev = y;
        }
    }
}

// STAFF &amp; SPELLS

if (state == IDLE || state == WALK) {

    // STAFF
    if (kStaff) {
        fCur = 0;
        state = STAFF;
        if (staff.state != S_ATTACK) {
            staff.state = S_ATTACK;
            var dist = 3.5*TILE;
            staff.tx = cx + dist * sign(dir) * (abs(dir) == 1);
            staff.ty = cy + dist * sign(dir) * (abs(dir) == 2);
        }
    }
    
    if (kSpell) {
        fCur = 0;
        state = SPELL;
        
        switch(spell) {
            case 0:
            break;
        }
    }
}

if (state == SPELL) {
    xVel = 0;
    yVel = 0;
    if (kSpell) {
        fCur = min(fCur, 3);
    }
    if (floor(fCur) == 3) {
        if (!cast) {
            cast = true;
            switch(spell) {
                case 0:
                    var temp_x = staff.x;
                    var temp_y = staff.y;
                    staff.x = x;
                    staff.y = y;
                    x = temp_x;
                    y = temp_y;
                break;
            }
        }
    }
} else {
    cast = false;
}

if (state == STAFF) {
    xVel = 0;
    yVel = 0;
}

// Z-MOVEMENT

zVel += zGrav;
z += zVel;

if (z + zVel &gt;= 0) {
    zVel = 0;
}
z = min(z, 0);
if (z != 0) { rollTimout = 5; }

// COLLISION 

instance_deactivate_object(objDestroyable);
for (var i = 0; i &lt; ds_list_size(dsCol); i++) {
    var d = ds_list_find_value(dsCol, i);
    instance_activate_object(d);
}

if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    if (state == ROLL &amp;&amp; z == 0) {
        xVel = -xVel * .5;
        if (abs(xVel) &gt; .5) {
            xVel *= .8;
            zVel = -1.2;
        }
    }
    else
        xVel = 0;
}
if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    if (state == ROLL &amp;&amp; z == 0) {
        yVel = -yVel * .5;
        if (abs(yVel) &gt; .5) {
            yVel *= .8;
            zVel = -1.2;
        }
    }
    else
        yVel = 0;
}
instance_activate_object(objDestroyable);




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state) {
    case IDLE:
        fCur = (fCur + .1) % 4;
        frame = floor(fCur);
    break;
    case WALK:
        fCur = (fCur + .2) % 4;
        frame = 4 + floor(fCur);
    break;
    case ROLL:
        fCur = (fCur + max(.2, .6 * sqrt(abs(xVel) + abs(yVel)) / spdRoll )) % 4;
        frame = 8 + floor(fCur);
    break;
    case FALL:
    //case DROWN:
        frame = 0;
    break;
    case SPELL:
        fCur = min(fCur + .3, 3.99);
        frame = 12 + floor(fCur);
        
        if (fCur == 3.99) {
            state = IDLE;
        }
    break;
    case STAFF:
        fCur = min(fCur + .25, 3.99);
        frame = 12 + floor(fCur);
        
        if (fCur == 3.99 &amp;&amp; !keyPressed("staff")) {
            state = IDLE;
        }
    break;
}

switch(dir) {
    case UP:
        row = 1;
    break;
    case DOWN:
        row = 0;
    break;
    case LEFT:
        row = 3;
    break;
    case RIGHT:
        row = 2;
    break;
}

if (!inWater &amp;&amp; !inDeepWater &amp;&amp; !inHole)
{
    draw_sprite_ext(sprShadow, -1, cx, cy, 1, 1, 0, c_white, .3);
}

if (!inHole &amp;&amp; state != DROWN)
    draw_sprite_part(sprPlayer, -1, frame*32, row * 32, 32, 32, cx - 16, cy - 16 + z);
else {
    var s_fall = (fallTimeout / maxFallTimeout);
    draw_sprite_ext(sprPlayerFall, -1, cx, cy, s_fall, s_fall, s_fall * 360, c_white, s_fall);
}

if (inWater &amp;&amp; !inDeepWater) {
    draw_sprite_part(sprWaterShadow, -1, 32*floor((global.timer / 5) % 4), 0, 32, 32, cx - 16, cy - 16);
}

if (state == DROWN) {
    fCur = min(fCur + .1, 4);
    frame = floor(fCur);
    draw_sprite(sprDrown, frame, cx, cy);
    if (fCur == 4) {
        x = xPrev;
        y = yPrev;
        state = IDLE;
    }
}

//draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
//draw_circle(cx, cy, 6, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
