<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, objCamera);

mx[0] = x;
my[0] = y;
mx[1] = x;
my[1] = y;

xVel = 0;
yVel = 0;
zVel = 0;
zGrav = .15;
z = 0;
maxVel = 6;
xPrev = x;
yPrev = y;

isHold = false;
inWater = false;

angle = 270;
spd = 1;

state = IDLE;
fCur = 0;
frame = 0;
fSpeed = 0;
dir = DOWN;
row = 0;

hp = 3;
drown = false;
drownTimer = 0;
maxDrownTimer = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>up = keyboard_check(vk_up);
down = keyboard_check(vk_down);
left = keyboard_check(vk_left);
right = keyboard_check(vk_right);

up = (up &amp;&amp; !down);
down = (!up &amp;&amp; down);
left = (left &amp;&amp; !right);
right = (!left &amp;&amp; right);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_space)) { zVel = -2; }

if(drown) {
    drownTimer = max(drownTimer - 1, 0);
    if (!drownTimer) {
    
        if (inWater) {
            x = xPrev;
            y = yPrev;
        }
    
        drown = false;
    }
}

if (!inWater &amp;&amp; !drown) {
    if (!isHold &amp;&amp; mouse_check_button_pressed(mb_left)) {
        mx[0] = device_mouse_x_to_gui(0);
        my[0] = device_mouse_y_to_gui(0);
        isHold = true;
        state = ROLL;
        xPrev = x;
        yPrev = y;
    }
}
if (isHold) {
    mx[1] = device_mouse_x_to_gui(0);
    my[1] = device_mouse_y_to_gui(0);
    angle = point_direction(mx[0], my[0], mx[1], my[1]);
    vel = min(point_distance(mx[0], my[0], mx[1], my[1]) / 64, maxVel);

    if (mouse_check_button_released(mb_left)) {
        
        xVel = lengthdir_x(vel, angle);
        yVel = lengthdir_y(vel, angle);             
        isHold = false;
    }
} else {
    if (max(abs(xVel), abs(yVel)) &gt; .2) {
        angle = point_direction(x, y, x + xVel, y + yVel);
    }
}
if (state == ROLL) {
    if (abs(xVel) &lt;= .1 &amp;&amp; abs(yVel) &lt;= .1) 
    {
        if (!isHold) {
            state = IDLE;
        }
    } else {
        fSpeed = .6 * sqrt(abs(xVel) + abs(yVel)) / maxVel;
    }
}

if (max(abs(xVel), abs(yVel)) &gt; .2) {
    if (abs(xVel) &gt; abs(yVel)) {
        dir = sign(xVel);
    } else {
        dir = 2*sign(yVel);
    }
} else {
    xVel = 0;
    yVel = 0;
}

if (!isHold) {
    xVel *= .985;
    yVel *= .985;
    fSpeed = max(.1, .6 * sqrt(abs(xVel) + abs(yVel)) / maxVel);
} else {
    xVel *= .9;
    yVel *= .9;
    fSpeed = max(.1, .6 * vel / maxVel);
}

inWater = z == 0 &amp;&amp; tile_layer_find(LAYER_WATER, x + xVel, y + yVel);

if (inWater) {
    
    isHold = false;
    
    xVel *= .9;
    yVel *= .9;
    
    if (sqrt(abs(xVel) + abs(yVel)) &lt; .3) {
        // Drown!
        if (!drown) {
            drown = true;
            drownTimer = maxDrownTimer;
            xVel = 0;
            yVel = 0;
        }
    }
}


zVel += zGrav;
z += zVel;
if (z &gt;= 0) {
    z = 0;
    zVel = 0;
}

// collision
if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    xVel = -xVel;
}
if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    yVel = -yVel;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state) {
    case IDLE:
        fCur = (fCur + fSpeed) % 4;
        frame = floor(fCur);
    break;
    case ROLL:
        fCur = (fCur + fSpeed) % 4;
        frame = 4 + floor(fCur);
    break;
}

switch(dir) {
    case UP:
        row = 1;
    break;
    case DOWN:
        row = 0;
    break;
    case LEFT:
        row = 3;
    break;
    case RIGHT:
        row = 2;
    break;
}

if (!inWater)
    draw_sprite_ext(sprShadow, -1, x, y, 1, 1, 0, c_white, .3);
if (!drown || !inWater) {
    draw_sprite_part(sprPlayer, -1, frame*32, row * 32, 32, 32, x - 16, y - 16 + z);
}

if (inWater) {
    if (!drown)
        draw_sprite(sprWaterShadow, 0, x, y);
    else
        draw_sprite(sprDrown, floor(4 * (maxDrownTimer - drownTimer) / maxDrownTimer), x, y);
}

if (isHold) {
    if (vel &gt; .05) {
        var v = vel / maxVel * 64;
        var seg = 18;
        var color = make_color_hsv(80 - 80 * vel / maxVel, 255, 255);
        for(var i = 0; i &lt;= seg; i+= 3) {
            draw_sprite_ext(sprVector, 0 + (i == seg),
            x + lengthdir_x(i * v / seg, angle),
            y + lengthdir_y(i * v / seg, angle), 1, 1, angle, color, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
