<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>objLiving</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;

angle = 0;
minAngle = 0;
maxAngle = 0;
velAngle = 10;

state = IDLE;

dsObjects = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(dsObjects);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state) {
    case S_FOLLOW:
        var fdist = 1.5 * TILE;
        switch(objPlayer.dir) {
            case UP:
                tx = objPlayer.cx;
                ty = objPlayer.cy + fdist;
            break;
            case DOWN:
                tx = objPlayer.cx;
                ty = objPlayer.cy - fdist;
            break;
            case LEFT:
                ty = objPlayer.cy;
                tx = objPlayer.cx + fdist;
            break;
            case RIGHT:
                ty = objPlayer.cy;
                tx = objPlayer.cx - fdist;
            break;
        }
        xVel = (tx - x) / 16;
        yVel = (ty - y) / 16;
        ztspeed = .2;
        if (abs(xVel) &lt; .2 &amp;&amp; abs(yVel) &lt; .2) {
            angle *= .8;
        } else {
            angle = point_direction(x, y, objPlayer.cx, objPlayer.cy) + 90;
        }
        ds_list_clear(dsObjects);
    break;
    case S_STAY:
        xVel = 0;
        yVel = 0;
        ztspeed = .1;
        angle *= .8;
        ds_list_clear(dsObjects);
    break;
    case S_ATTACK:
        ztspeed = 0;
        var ang = point_direction(x, y, tx, ty);
        var dist = point_distance(x, y, tx, ty);
        xVel = lengthdir_x(min(1, dist / 16) * 6, ang);
        yVel = lengthdir_y(min(1, dist / 16) * 6, ang);
        
        angle = (angle + sign(objPlayer.dir)*30) % 360;

        // DESTROYING OBJECTS
        instance_deactivate_object(objDestroyable);
        instance_activate_region(x - 32, y - 32, 64, 64, true);
        for(var i = 0; i &lt; instance_number(objDestroyable); i++) {
        
            var destroyable = instance_find(objDestroyable, i);
            
            if (place_meeting(x + xVel, y + yVel, destroyable)) {
                if (!ds_list_find_index(dsObjects, destroyable)) {
                    destroyable.hp = max(destroyable.hp - 1, 0);
                    if (destroyable.hp &gt; 0) {
                        ds_list_add(dsObjects, destroyable);                
                    }
                }
            }
        }
        instance_activate_object(objDestroyable);
        
        if (abs(xVel) &lt; .2 &amp;&amp; abs(yVel) &lt; .2) {
            xVel = 0;
            yVel = 0;
            if (!keyPressed("staff")) {
                state = S_STAY;
                ds_list_clear(dsObjects);
            }
        }
    break;
}

z = sin(zt);
zt = (zt + ztspeed) % (2*pi);

if (point_distance(x, y, objPlayer.x, objPlayer.y) &gt; 8*TILE) {
    state = S_FOLLOW;
}

z = min(max(-2, z), 2);
x += xVel;
y += yVel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprStaffShadow, -1, x, y, 1, 1, 0, c_white, .3);
draw_sprite_ext(sprStaff, type, x, y - 6 + z, 1, 1, angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
