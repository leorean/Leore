<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, objCamera);

mx[0] = x;
my[0] = y;
mx[1] = x;
my[1] = y;

xVel = 0;
yVel = 0;

isHold = false;

dir = DOWN;
angle = 270;
spd = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>up = keyboard_check(vk_up);
down = keyboard_check(vk_down);
left = keyboard_check(vk_left);
right = keyboard_check(vk_right);

up = (up &amp;&amp; !down);
down = (!up &amp;&amp; down);
left = (left &amp;&amp; !right);
right = (!left &amp;&amp; right);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (left) {
    dir = LEFT;
    xVel = -spd;    
} else if (right) {
    dir = RIGHT;
    xVel = spd;
} else {
    xVel = 0;
}

if (up) {
    dir = UP;
    yVel = -spd;    
} else if (down) {
    dir = DOWN;
    yVel = spd;
} else {
    yVel = 0;
}*/

if (!isHold &amp;&amp; mouse_check_button_pressed(mb_left)) {
    mx[0] = window_view_mouse_get_x(0);
    my[0] = window_view_mouse_get_y(0);
    isHold = true;
}

if (isHold) {
    mx[1] = window_view_mouse_get_x(0);
    my[1] = window_view_mouse_get_y(0);

    if (mouse_check_button_released(mb_left)) {
        angle = point_direction(mx[0], my[0], mx[1], my[1]);
        vel = min(point_distance(mx[0], my[0], mx[1], my[1]) / 32, 6);
        
        xVel = lengthdir_x(vel, angle);
        yVel = lengthdir_y(vel, angle);
        
        isHold = false;
    }
}

if (!isHold) {
    xVel *= .985;
    yVel *= .985;
} else {
    xVel *= .9;
    yVel *= .9;
}
/*
if (abs(xVel) &gt; 0 || abs(yVel) &gt; 0)
    angle = point_direction(x, y, x + xVel, y + yVel);

var collision_x = false;
var collision_y = false;
for (var col_x = -8; col_x &lt;=8; col_x++) {
    for (var col_y = -8; col_y &lt;=8; col_y++) {
        if (!collision_x &amp;&amp; tile_layer_find(LAYER_FG, x + col_x + xVel, y)) {
            collision_x = true;
        }
        if (!collision_y &amp;&amp; tile_layer_find(LAYER_FG, x, y + col_y + yVel)) {
            collision_y = true;
        }
    }
}*/

if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    xVel = -xVel;
}
if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    yVel = -yVel;
}
/*
for (var a = 0; a &lt; 360; a++) {
    if (tile_layer_find(LAYER_FG, x + lengthdir_x(4, a), y + lengthdir_y(4, a))) {
        x -= lengthdir_x(4, a);
        y -= lengthdir_y(4, a);        
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
