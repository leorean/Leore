<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTrap</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAny</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = 0;
activated = false;
_activated = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (activated) {

    // TODO: distinguish different "goals":
    // not only after all enemies are done..

    count = 0;
    instance_activate_object(objEnemy);
    for(var i = 0; i &lt; instance_number(objEnemy); i++) {
        var e = instance_find(objEnemy, i);
        if(e.trap_id = id) {
            count++;
        }
    }
    if (count = 0) {
        instance_activate_object(objTrapBlock);
        for(var i = 0; i &lt; instance_number(objTrapBlock); i++) {
            var tb = instance_find(objTrapBlock, i);
            if (tb.type == type) {
                tb.activated = false;
            }
        }
    }
}

if (activated &amp;&amp; !_activated) {
    instance_activate_object(objTrapSpawn);
    for (var i = 0; i &lt; instance_number(objTrapSpawn); i++) {
        var ts = instance_find(objTrapSpawn, i);
        if (ts.type == type) {
            var e = instance_create(ts.x + 8, ts.y + 8, objEnemy);
            e.type = ts.enemyType;
            e.trap_id = id;
            
            var eff = instance_create(ts.x + 8, ts.y + 8, objEffect);
            eff.type = 2;
        }
    }

    instance_activate_object(objTrapBlock);
    for (var i = 0; i &lt; instance_number(objTrapBlock); i++) {
        var tb = instance_find(objTrapBlock, i);
        if (tb.type == type) {
            tb.activated = true;
        }
    }    
    _activated = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
