<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, objCamera);

zVel = 0;
zGrav = .15;
z = 0;

xVel = 0;
yVel = 0;
maxVel = 6;
xPrev = x;
yPrev = y;
spd = 1.5;
spdWater = 1;
spdRoll = 3;
accRoll = .1;
accWalk = .4;

inWater = false;
inHole = false;
isRolling = false;

rollTimout = 0;
fallTimeout = 0;
maxFallTimeout = 60;

state = IDLE;
fCur = 0;
frame = 0;
dir = DOWN;
angle = 270;

hp = 3;

row = 0;

canDestroy = false;
dsCol = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// FLAGS
inWater = z == 0 &amp;&amp; tile_layer_find(LAYER_WATER, x, y);

// INPUT HANDLING

if (inHole) setControlsEnabled(false);

kUp = global.keys[0];
kDown = global.keys[1];
kLeft = global.keys[2];
kRight = global.keys[3];
kRoll = global.keys[4];

if (rollTimout) {
    rollTimout = max(rollTimout - 1, 0);
}

if (state == FALL) {
    dir = DOWN;
    fallTimeout = max(fallTimeout - 1, 0);
    if (!fallTimeout) {
        x = xPrev;
        y = yPrev;
        inHole = false;
        state = IDLE;
    }
}

if (state != ROLL) {

    if (kLeft) dir = LEFT;
    if (kRight) dir = RIGHT;
    if (kUp) dir = UP;
    if (kDown) dir = DOWN;
    
    if (kLeft) {
        xVel = max(xVel - accWalk, -spd);
    }
    if (kRight) {
        xVel = min(xVel + accWalk, spd);
    }
    if (kUp) {
        yVel = max(yVel - accWalk, -spd);
    }
    if (kDown) {
        yVel = min(yVel + accWalk, spd);
    }
    
    if (!kLeft &amp;&amp; !kRight) xVel = 0;
    if (!kUp &amp;&amp; !kDown) yVel = 0;
        
    if (state == IDLE) {    
        if (kLeft || kRight || kUp || kDown) state = WALK;
    }
    if (state == WALK)
        if (!kLeft &amp;&amp; !kRight &amp;&amp; !kUp &amp;&amp; !kDown) state = IDLE;

    if (kRoll) state = ROLL;
        
} else {
    if (!rollTimout) {
    
        if (kLeft) dir = LEFT;
        if (kRight) dir = RIGHT;
        if (kUp) dir = UP;
        if (kDown) dir = DOWN;
    
        if (kRoll) {
            if (kRight) { xVel += accRoll; }
            if (kLeft) { xVel -= accRoll; }
        }
        
        if (kRoll) {
            if (kDown) { yVel += accRoll; }
            if (kUp) { yVel -= accRoll; }
        }

        if (!kRoll &amp;&amp; xVel == 0 &amp;&amp; yVel == 0 &amp;&amp; z == 0) 
            state = IDLE;

    }
    if ((!kLeft &amp;&amp; !kRight) || !kRoll || rollTimout) xVel = sign(xVel)*max(abs(xVel) - accRoll, 0);
    if ((!kUp &amp;&amp; !kDown) || !kRoll || rollTimout) yVel = sign(yVel)*max(abs(yVel) - accRoll, 0);
    
    xVel = sign(xVel) * min(abs(xVel), spdRoll);
    yVel = sign(yVel) * min(abs(yVel), spdRoll);
}

if (inWater) {
    xVel = sign(xVel) * min(abs(xVel), spdWater);
    yVel = sign(yVel) * min(abs(yVel), spdWater);
}

// DESTROYING OBJECTS

canDestroy = state == ROLL &amp;&amp; sqrt(abs(xVel) + abs(yVel)) &gt; 0;

ds_list_clear(dsCol);
instance_deactivate_object(objDestroyable);
instance_activate_region(x - 32, y - 32, 64, 64, true);
for(var i = 0; i &lt; instance_number(objDestroyable); i++) {

    var destroyable = instance_find(objDestroyable, i);
    
    if (place_meeting(x + xVel, y + yVel, destroyable)) {
        if (!ds_list_find_value(dsCol, destroyable)) {
            if (canDestroy) {
                destroyable.hp = max(destroyable.hp - 1, 0);
            }
            if (destroyable.hp &gt; 0) {
                ds_list_add(dsCol, destroyable);
            }
        }
    }
}
instance_activate_object(objDestroyable);

// HOLES

if (z == 0) {
    var hole = instance_place(x, y, objHole);
    if (instance_exists(hole)) {

        var ang = point_direction(x, y, hole.x + 8, hole.y + 8);
        var hole_dist = point_distance(x, y + 4, hole.x + 8, hole.y + 8);

        if (hole_dist &gt; 7)
        {
            xVel += lengthdir_x(.1, ang);
            yVel += lengthdir_y(.1, ang);
        } else {
            xVel = lengthdir_x(.4, ang);
            yVel = lengthdir_y(.4, ang);
        }
        if (!inHole) {
            if (hole_dist &lt; 5) {
                inHole = true;
                state = FALL;
                fallTimeout = maxFallTimeout;
            }
        }
    } else
    {
        xPrev = x;
        yPrev = y;
    }
}

// Z-MOVEMENT

zVel += zGrav;
z += zVel;

if (z + zVel &gt;= 0) {
    zVel = -zVel * .5;
}
z = min(z, 0);
if (z != 0) { rollTimout = 5; }

// COLLISION 

instance_deactivate_object(objDestroyable);
for (var i = 0; i &lt; ds_list_size(dsCol); i++) {
    var d = ds_list_find_value(dsCol, i);
    instance_activate_object(d);
}

if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    if (state == ROLL &amp;&amp; z == 0) {
        xVel = -xVel * .5;
        if (abs(xVel) &gt; .5)
            zVel = -1;
    }
    else
        xVel = 0;
}
if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    if (state == ROLL &amp;&amp; z == 0) {
        yVel = -yVel * .5;
        if (abs(yVel) &gt; .5)
            zVel = -1;
    }
    else
        yVel = 0;
}
instance_activate_object(objDestroyable);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state) {
    case IDLE:
        fCur = (fCur + .1) % 4;
        frame = floor(fCur);
    break;
    case WALK:
        fCur = (fCur + .2) % 4;
        frame = 4 + floor(fCur);
    break;
    case ROLL:
        fCur = (fCur + max(.2, .6 * sqrt(abs(xVel) + abs(yVel)) / spdRoll )) % 4;
        frame = 8 + floor(fCur);
    break;
    case FALL:
        frame = 0;
    break;
}

switch(dir) {
    case UP:
        row = 1;
    break;
    case DOWN:
        row = 0;
    break;
    case LEFT:
        row = 3;
    break;
    case RIGHT:
        row = 2;
    break;
}

if (!inWater &amp;&amp; state != FALL)
{
    draw_sprite_ext(sprShadow, -1, x, y, 1, 1, 0, c_white, .3);
}

if (state != FALL)
    draw_sprite_part(sprPlayer, -1, frame*32, row * 32, 32, 32, x - 16, y - 16 + z);
else {
    var s_fall = (fallTimeout / maxFallTimeout);
    draw_sprite_ext(sprPlayerFall, -1, x, y, s_fall, s_fall, s_fall * 360, c_white, s_fall);
}

if (inWater) {
    draw_sprite_part(sprWaterShadow, -1, 32*floor((global.timer / 5) % 4), 0, 32, 32, x - 16, y - 16);
}

//draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
