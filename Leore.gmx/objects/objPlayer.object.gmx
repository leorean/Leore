<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objLiving</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, objCamera);

cx = (bbox_right + bbox_left) / 2;
cy = (bbox_bottom + bbox_top) / 2 - 2;

zVel = 0;
zGrav = .15;
z = 0;

xVel = 0;
yVel = 0;
maxVel = 6;
xPrevDrown = x;
yPrevDrown = y;
xPrevHole = x;
yPrevHole = y;
spd = 1.5;

inWater = false;
inHole = false;
isRolling = false;
inShallowWater = false;
inWater = false;
inCliff = false;

fallTimeout = 0;
maxFallTimeout = 60;
maxCliffTimer = 30;
cliffTimer = 0;

state = IDLE;
fCur = 0;
frame = 0;
dir = global.dir;
angle = 270;
row = 0;

sword = instance_create(x, y, objSword);
hp = 3;
hurt = 0;
invincible = 0;

canSwim = true;
canRoll = true;

hole = noone;

canDestroy = false;
dsCol = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(dsCol);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cx = (bbox_right + bbox_left) / 2;
cy = (bbox_bottom + bbox_top) / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != G_PLAY) exit;

// calculate this after the movement!
//cx = (bbox_right + bbox_left) / 2;
//cy = (bbox_bottom + bbox_top) / 2 - 2;

// FLAGS
inShallowWater = z == 0 &amp;&amp; tile_layer_find(LAYER_WATER, x, y);
inWater = false;
if (inShallowWater) {
    var wt = tile_layer_find(LAYER_WATER, x, y);
    var wt_index = getTileIndexForCoordinates(tile_get_left(wt), tile_get_top(wt));
    if (isWaterTile(wt_index)) {
        inWater = true;
        inShallowWater = false;
    }
}

if (state == FALL) {
    xVel = 0;
    yVel = 0;
    if (fallTimeout) {
        dir = DOWN;
        fallTimeout = max(fallTimeout - 1, 0);
    }
    else {
        x = xPrevHole;
        y = yPrevHole;
        state = IDLE;
    }
} else {
    inHole = false;
}

if (inWater) {
    if (!canSwim &amp;&amp; state != DROWN) {
        state = DROWN;
        fCur = 0;
    }
    if (canSwim) {
        state = SWIM;
    }
}

if (state == DROWN) {
    xVel *= .9;
    yVel *= .9;
}

// STORING PREV COORDINATES

if (!inShallowWater &amp;&amp; !inWater) {
    xPrevDrown = x;
    yPrevDrown = y;
}

var hcp = instance_place(x, y, objHoleCheckPoint);
if (hcp) {
    xPrevHole = hcp.x + 8;
    yPrevHole = hcp.y + 8;    
}

// INPUT HANDLING

if (inWater &amp;&amp; !canSwim) setControlsEnabled(false);
if (inHole) setControlsEnabled(false);
if (hurt) setControlsEnabled(false);

kUp = keyPressed("up");
kDown = keyPressed("down");
kLeft = keyPressed("left");
kRight = keyPressed("right");
kAction1 = keyPressed("action1");
kAction2 = keyPressed("action2");
kAction1Pressed = keyPressed("action1pressed");
kAction2Pressed = keyPressed("action2pressed");

if (kLeft &amp;&amp; kRight) { kLeft = 0; kRight = 0; }
if (kUp &amp;&amp; kDown) { kUp = 0; kDown = 0; }

// CLIFFS

if (!inCliff)
    cliff = instance_place(x, y + 2, objCliff);

if (cliff != noone) {
    if (dir == DOWN &amp;&amp; kDown) {
        cliffTimer = min(cliffTimer + 1, maxCliffTimer);
    } else {
        cliffTimer = 0;
    }
    
    if (cliffTimer == maxCliffTimer) {
        inCliff = true;
        z = -1;
        zVel = -2.5;
        cliffTimer = 0;
    }
} else {
    cliffTimer = 0;
}

if (inCliff) {
    y += 1.5;
    if (!place_meeting(x, y, objSolid)) {
        inCliff = false;
    }
    if (z == 0) {
        inCliff = false;
    }
}

// TOUCH SIGNS

var sgn = instance_place(x, y, objSign);
if (sgn != noone &amp;&amp; dir == UP) {
    if (kAction1Pressed)
        showMessage(sgn.text);
}

// DOORS
if (state == WALK || state == ROLL) {
    var door = instance_place(x, y, objDoor);
    if (door) {
        if (dir == door.dir) {
            with(objLevelTransition) instance_destroy();
            var trans = instance_create(door.x + 8, door.y + 8, objLevelTransition);
            trans.tx = door.tx;
            trans.ty = door.ty;
            trans.target = door.target;
            switch(door.targetdir) {
                case "up":
                    global.dir = UP;
                break;
                case "down":
                    global.dir = DOWN;
                break;
                case "left":
                    global.dir = LEFT;
                break;
                case "right":
                    global.dir = RIGHT;
                break;
            }
        }
    }
}

// WALKING

if (state == IDLE || state == WALK) {

    if (kLeft) dir = LEFT;
    if (kRight) dir = RIGHT;
    if (kUp) dir = UP;
    if (kDown) dir = DOWN;
    
    if (kLeft) {
        xVel = max(xVel - .2, -spd);
    }
    if (kRight) {
        xVel = min(xVel + .2, spd);
    }
    if (kUp) {
        yVel = max(yVel - .2, -spd);
    }
    if (kDown) {
        yVel = min(yVel + .2, spd);
    }
    
    if (!kLeft &amp;&amp; !kRight) xVel = 0;
    if (!kUp &amp;&amp; !kDown) yVel = 0;
        
    if (state == IDLE) {    
        if (kLeft || kRight || kUp || kDown) state = WALK;
    }
    if (state == WALK)
        if (!kLeft &amp;&amp; !kRight &amp;&amp; !kUp &amp;&amp; !kDown) state = IDLE;

    if (canRoll) {
        if (kAction1) state = ROLL;
    }
        
} 

// ROLLING

if (state == ROLL) {
    
    if (kLeft) dir = LEFT;
    if (kRight) dir = RIGHT;
    if (kUp) dir = UP;
    if (kDown) dir = DOWN;

    if (kAction1) {
        if (kRight) { xVel += .1; }
        if (kLeft) {  xVel -= .1; }
    }
    
    if (kAction1) {
        if (kDown) { yVel += .1; }
        if (kUp) {   yVel -= .1; }
    }

    if (!kAction1 &amp;&amp; xVel == 0 &amp;&amp; yVel == 0 &amp;&amp; z == 0) 
        state = IDLE;

    if ((!kLeft &amp;&amp; !kRight) || !kAction1) xVel = sign(xVel)*max(abs(xVel) - .1, 0);
    if (   (!kUp &amp;&amp; !kDown) || !kAction1) yVel = sign(yVel)*max(abs(yVel) - .1, 0);

    xVel = sign(xVel) * min(abs(xVel), 3);
    yVel = sign(yVel) * min(abs(yVel), 3);
}

if (inShallowWater &amp;&amp; !inWater) {
    xVel = sign(xVel) * min(abs(xVel), 1);
    yVel = sign(yVel) * min(abs(yVel), 1);
}

// SWIMMING

if (state == SWIM) {
    if (!inWater) {
        state = IDLE;
    }
    
    if (kLeft) dir = LEFT;
    if (kRight) dir = RIGHT;
    if (kUp) dir = UP;
    if (kDown) dir = DOWN;

    if (kRight) { xVel += .05; }
    if (kLeft) {  xVel -= .05; }
    
    if (!kLeft &amp;&amp; !kRight) xVel = sign(xVel) * max(abs(xVel) - .05, 0);
    if (!kUp &amp;&amp; !kDown)    yVel = sign(yVel) * max(abs(yVel) - .05, 0);
    
    
    if (kDown) {  yVel += .05; }
    if (kUp) {    yVel -= .05; }
    
    xVel = sign(xVel) * min(abs(xVel), 1);
    yVel = sign(yVel) * min(abs(yVel), 1);

}

// GETTING HIT

invincible = max(invincible - 1, 0);
hurt = max(hurt - 1, 0);
var enemy = instance_place(x, y, objEnemy);
if (instance_exists(enemy) &amp;&amp; enemy.hp &gt; 0 &amp;&amp; !enemy.hurt &amp;&amp; !hurt &amp;&amp; !invincible) {
    var kbAngle = point_direction(cx, cy, enemy.x, enemy.y);
    xVel = lengthdir_x(-3, kbAngle);
    yVel = lengthdir_y(-3, kbAngle);
    hurt = 20;
    state = HURT;
}

if (state == HURT) {
    xVel *= .85;
    yVel *= .85;
    
    if (!hurt) {
        state = IDLE;
        invincible = 30;
    }
}

// DESTROYING OBJECTS

canDestroy = state == ROLL &amp;&amp; (max(abs(xVel), abs(yVel)) &gt; .5) &amp;&amp; z == 0;

ds_list_clear(dsCol);
instance_deactivate_object(objDestroyable);
instance_activate_region(x - 32, y - 32, 64, 64, true);
for(var i = 0; i &lt; instance_number(objDestroyable); i++) {

    var destroyable = instance_find(objDestroyable, i);
    if (destroyable.object_index == objEnemy)
        destroyable = noone;
    
    if (place_meeting(x + xVel, y + yVel, destroyable)) {
        if (!ds_list_find_index(dsCol, destroyable)) {
            if (canDestroy) {
                destroyable.hp = max(destroyable.hp - 1, 0);
            }
            if (destroyable.hp == 0) {
                ds_list_add(dsCol, destroyable);
            }
        }
    }
}
instance_activate_object(objDestroyable);

// HOLES

if (z == 0) {
    var minDist = 999;
    hole = noone;
    instance_deactivate_object(objHole);
    instance_activate_region(cx - 2*TILE, cy - 2*TILE, 4*TILE, 4*TILE, true);

    for (var i = 0; i &lt; instance_number(objHole); i++) {
        var h = instance_find(objHole, i);
        if (place_meeting(x, y, h)) {
            var dist = point_distance(x, y, h.x + 8, h.y + 8);
            if (dist &lt; minDist) {
                minDist = dist;
                hole = h;
            }
        }
    }

    instance_activate_object(objHole);
    if (instance_exists(hole)) {
            var ang = point_direction(cx, cy, hole.x + 8, hole.y + 8);
            var hole_dist = point_distance(cx, cy, hole.x + 8, hole.y + 8);
    
            xVel += lengthdir_x(.3, ang);
            yVel += lengthdir_y(.3, ang);

        if (state != FALL) {

            if (collision_point(cx, cy, objHole, 0, 1)) {
                inHole = true;
                hole = noone;
                state = FALL;
                fallTimeout = maxFallTimeout;
            }
        }
    }
}

// SWORD

if (state == ATTACK) {
    xVel = 0;
    yVel = 0;
}
if (state == IDLE || state == WALK) {
    if (kAction2Pressed &amp;&amp; z == 0) {
        fCur = 0;
        state = ATTACK;
        sword.state = ATTACK;
    }
}

// Z-MOVEMENT

zVel += zGrav;
z += zVel;

if (z + zVel &gt;= 0) {
    zVel = 0;
}
z = min(z, 0);
if (z != 0) { rollTimout = 5; }

// COLLISION 

// check for destroyables that "still exist" (e.g. avoid bumping in bushes with 0 hp)
instance_activate_object(objDestroyable);
for (var i = 0; i &lt; ds_list_size(dsCol); i++) {
    var d = ds_list_find_value(dsCol, i);
    instance_deactivate_object(d);
}

var xCol = instance_place(x + xVel, y, objDestroyable);
var yCol = instance_place(x, y + yVel, objDestroyable);
if (xCol &amp;&amp; xCol.object_index == objEnemy) xCol = noone;
if (yCol &amp;&amp; yCol.object_index == objEnemy) yCol = noone;

// stairs
var stairs = instance_place(x + xVel, y + yVel, objStairs);
if (stairs &amp;&amp; z == 0) {
    yVel = sign(yVel) * min(abs(yVel), .8);
    instance_deactivate_object(objStairs);
}

if (!place_meeting(x + xVel, y, objSolid)) {
    x += xVel;
} else {
    if (state == ROLL &amp;&amp; z == 0) {
        xVel = -xVel * .5;
        if (abs(xVel) &gt; .5) {
            xVel *= .8;
            zVel = -1.2;
        }
    }
    else
        xVel = 0;
}
if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    if (state == ROLL &amp;&amp; z == 0) {
        yVel = -yVel * .5;
        if (abs(yVel) &gt; .5) {
            yVel *= .8;
            zVel = -1.2;
        }
    }
    else
        yVel = 0;
}
x = max(min(x, room_width - 8), 8);
y = max(min(y, room_height - 8), 8);
instance_activate_object(objDestroyable);
instance_activate_object(objStairs);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DRAWING &lt;-&gt; STATE LOGIC
if (global.state == G_PLAY) {
    switch(state) {
        case IDLE:
            fCur = (fCur + .1) % 4;
            frame = floor(fCur);
        break;
        case WALK:
            fCur = (fCur + .2) % 4;
            frame = 4 + floor(fCur);
        break;
        case ROLL:
            fCur = (fCur + max(.2, .6 * sqrt(abs(xVel) + abs(yVel)) / 3 )) % 4;
            frame = 8 + floor(fCur);
        break;
        case FALL:
            frame = 0;
        break;
        case ATTACK:
            fCur = 0;
            frame = 12 + floor(fCur);        
        break;
        case DROWN:
            fCur = min(fCur + .1, 4);
            frame = floor(fCur);
            if (fCur == 4) {
                if (inWater) {
                    x = xPrevDrown;
                    y = yPrevDrown;
                } else {
                    state = IDLE;
                }
            }
        break;
        case SWIM:
            fCur = (fCur + .1) % 3;
            frame = 13 + floor(fCur);        
        break;
    }
}

switch(dir) {
    case UP:
        row = 1;
    break;
    case DOWN:
        row = 0;
    break;
    case LEFT:
        row = 3;
    break;
    case RIGHT:
        row = 2;
    break;
}

// DRAWING 

// shadow
if (!inShallowWater &amp;&amp; !inWater &amp;&amp; !inHole)
{
    draw_sprite(sprShadow, -1, x, bbox_bottom);
}

if (!inHole &amp;&amp; state != DROWN) {
    if (invincible % 2 == 0 &amp;&amp; hurt % 2 == 0)
        draw_sprite_part(sprPlayer, -1, frame*32, row * 32, 32, 32, x - 16, cy - 18 + z);
}
else {
    var s_fall = (fallTimeout / maxFallTimeout);
    draw_sprite_ext(sprPlayerFall, -1, cx, cy, s_fall, s_fall, s_fall * 360, c_white, s_fall);
}

// shallow water
if (inShallowWater &amp;&amp; !inWater) {
    draw_sprite_part(sprWaterShadow, -1, 32*floor((global.timer / 5) % 4), 0, 32, 32, x - 16, y - 20);
}

if (state == DROWN) {
    draw_sprite(sprDrown, frame, cx, cy);
}

if (global.debug) {
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
    draw_circle(cx, cy, 6, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
